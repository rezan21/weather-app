{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","style","textDecoration","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","undefined","humidity","description","error","API_KEY","App","state","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","list","main","temp","sys","weather","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAmBeA,EAjBA,WACb,OACE,6BACE,wBAAIC,UAAU,0BAAd,eACA,wBAAIA,UAAU,6BAAd,gDAGA,wBACEA,UAAU,4BACVC,MAAO,CAAEC,eAAgB,cAF3B,uCCGSC,EAVF,SAAAC,GAAK,OAChB,6BACE,0BAAMJ,UAAU,SAASK,SAAUD,EAAME,YACvC,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,4BAAQT,UAAU,SAAlB,kBC8BSU,EAnCC,SAAAN,GAAK,OACnB,yBAAKJ,UAAU,iBAEZI,EAAMO,MAAQP,EAAMQ,SACnB,uBAAGZ,UAAU,gBAAb,YACY,IACV,0BAAMA,UAAU,kBACbI,EAAMO,KADT,KACiBP,EAAMQ,UAKzB,uBAAGZ,UAAU,gBAEVI,EAAMS,YAAc,wCAAqCC,GAG7DV,EAAMW,UACL,uBAAGf,UAAU,gBAAb,aACY,0BAAMA,UAAU,kBAAkBI,EAAMW,WAGrDX,EAAMY,aACL,uBAAGhB,UAAU,gBAAb,gBACe,0BAAMA,UAAU,kBAAkBI,EAAMY,cAGxDZ,EAAMa,OACL,uBAAGjB,UAAU,gBACX,0BAAMA,UAAU,kBAAkBI,EAAMa,UCxB1CC,G,MAAU,oCAwEDC,E,2MArEbC,MAAQ,CACNP,iBAAaC,EACbH,UAAMG,EACNF,aAASE,EACTC,cAAUD,EACVE,iBAAaF,EACbG,WAAOH,G,EAETR,W,sCAAa,WAAMe,GAAN,qBAAAC,EAAA,4DACXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAH/B,SAKYC,MAAM,kDAAD,OACwBhB,EADxB,YACgCC,EADhC,+BAC8DM,IAN/E,cAKLU,EALK,gBASQA,EAASC,OATjB,OASLC,EATK,OAUPnB,GAAQC,GACVmB,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZpB,YAAaiB,EAAKI,KAAK,GAAGC,KAAKC,KAC/BzB,KAAMmB,EAAKI,KAAK,GAAG1B,KACnBI,QAASkB,EAAKI,KAAK,GAAGG,IAAIzB,QAC1BG,SAAUe,EAAKI,KAAK,GAAGC,KAAKpB,SAC5BC,YAAac,EAAKI,KAAK,GAAGI,QAAQ,GAAGtB,YACrCC,MAAO,MAGT,EAAKgB,SAAS,CACZpB,iBAAaC,EACbH,UAAMG,EACNF,aAASE,EACTC,cAAUD,EACVE,iBAAaF,EACbG,MAAO,uCA3BA,0C,8HAgCX,OACE,6BACE,yBAAKjB,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMM,WAAYiC,KAAKjC,aACvB,kBAAC,EAAD,CACEO,YAAa0B,KAAKnB,MAAMP,YACxBE,SAAUwB,KAAKnB,MAAML,SACrBJ,KAAM4B,KAAKnB,MAAMT,KACjBC,QAAS2B,KAAKnB,MAAMR,QACpBI,YAAauB,KAAKnB,MAAMJ,YACxBC,MAAOsB,KAAKnB,MAAMH,kB,GA1DpBuB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.584f20e2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles = () => {\n  return (\n    <div>\n      <h1 className='title-container__title'>Weather App</h1>\n      <h2 className='title-container__subtitle'>\n        Find out temperature, conditions and more...\n      </h2>\n      <h3\n        className='title-container__subtitle'\n        style={{ textDecoration: 'underline' }}\n      >\n        An app made with react.js library\n      </h3>\n    </div>\n  );\n};\n\nexport default Titles;\n","import React from 'react';\n\nconst Form = props => (\n  <div>\n    <form className='myForm' onSubmit={props.getWeather}>\n      <input type='text' name='city' placeholder='City...' />\n      <input type='text' name='country' placeholder='Country...' />\n      <button className='thisa'>Get Weather</button>\n    </form>\n  </div>\n);\n\nexport default Form;\n","import React from 'react';\n\nconst Weather = props => (\n  <div className='weather__info'>\n    {/* 'logical and', used when there is no 'else' case. eg: if x then y ---> x && y */}\n    {props.city && props.country && (\n      <p className='weather__key'>\n        Location:{' '}\n        <span className='weather__value'>\n          {props.city}, {props.country}\n        </span>\n      </p>\n    )}\n    {\n      <p className='weather__key'>\n        {/* 'ternary operator' is the one with 'elsel case. eg: if x then y else z ----> x ? y : z  */}\n        {props.temperature ? 'Temperature: {props.temperature}' : undefined}\n      </p>\n    }\n    {props.humidity && (\n      <p className='weather__key'>\n        Humidity: <span className='weather__value'>{props.humidity}</span>\n      </p>\n    )}\n    {props.description && (\n      <p className='weather__key'>\n        Description: <span className='weather__value'>{props.description}</span>\n      </p>\n    )}\n    {props.error && (\n      <p className='weather__key'>\n        <span className='weather__value'>{props.error}</span>\n      </p>\n    )}\n  </div>\n);\n\nexport default Weather;\n","import React, { Component } from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nimport './App.css';\n\n// open weather app api token\nconst API_KEY = '9eb3640b6d4ec66c2ca3c4b0750c01c6';\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    // fetch data and save them in a const.\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/find?q=${city},${country}&units=metric&appid=${API_KEY}`\n    );\n    // convert the saved data to json files\n    const data = await api_call.json();\n    if (city && country) {\n      console.log(data);\n      this.setState({\n        temperature: data.list[0].main.temp,\n        city: data.list[0].name,\n        country: data.list[0].sys.country,\n        humidity: data.list[0].main.humidity,\n        description: data.list[0].weather[0].description,\n        error: ''\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter the city and country.'\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <div className='wrapper'>\n          <div className='main'>\n            <div className='container'>\n              <div className='rowsa thisa'>\n                <div className='col-xs-5 title-container'>\n                  <Titles />\n                </div>\n                <div className='col-xs-7 form-container'>\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}